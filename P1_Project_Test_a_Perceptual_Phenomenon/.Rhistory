xi <- c(2,-3,5,4,7)
yi <- c(10, 13, 15, 10)
mean(xi)
mean(yi)
xi - 3
x2 <- xi - 3
x2^2
sum(x^x)
sum(x2^x)
sum(x2^2)
yi2 <- xi - 12
y12
yi2
yi2 <- yi - 12
yi2
ysum <- y12^2
ysum <- yi2^2
ysum
sum(ysum)
58/4
18/3
sqrt(20.5)
(58 + 18)/(4 + 3)
10.85714/4
10.85714/3
sqrt(2.714285 + 3.619047 )
10.85714/5
10.85714/4
sqrt(2.171428 + 2.714285 )
-9/2.210365
k <- c("Congruent", "Congruent", "Congruent ")
v <- c(65, 45, 67, 89, 60, 70)
1.7/0.04018568
rm(list = ls())
k <- c("Congruent", "Congruent", "Congruent ")
v <- c(65, 45, 67, 89, 60, 70)
vk <- data.frame(k,v)
vk
vk1 <- vk %>%
rowwise() %>%
as.character(k)
mutate(TermID = ifelse(k == "Congruent ",
"Congruent ", "Incongruent"))
library(tidyr)
library(dplyr)
vk1 <- vk %>%
rowwise() %>%
as.character(k)
mutate(TermID = ifelse(k == "Congruent ",
"Congruent ", "Incongruent"))
vk
try <- function(v) {
Response = 0
for (i in v){
if(k == "Congruent"){
Response = "Congruent"
} else{
Response = "Incongruent"
}
}
}
try(vk1)
vk$k <- sapply(v$k, try)
vk$response <- ifelse(k == "Congruent ",
"Congruent ", "Incongruent")
vk
setwd("~/Documents/DataScientistLearningPath/Udacity_DataAnalystNanodegree/P1_TestPerceptualPhenomenon/Project")
knitr::opts_chunk$set(echo = TRUE)
stroopbox$ResponseTime <- ifelse(k == "Congruent ",
"Congruent ", "Incongruent")
# Read in Data
library(readr)
stroopdata <- read_csv("stroopdata.csv")
head(stroopdata, 3)
str(stroopdata)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyr)
stroopbox <- stroopdata %>%
gather(key, values)
stroopbox$ResponseTime <- ifelse(k == "Congruent ",
"Congruent ", "Incongruent")
View(stroopbox)
stroopbox <- stroopdata %>%
gather(key = Conidtion1, values = ResponseTime)
?gather
stroopbox <- stroopdata %>%
gather(key = Conidtion1, value = ResponseTime)
stroopbox
stroopbox <- stroopdata %>%
gather(key = Conidtion, value = ResponseTime)
head(stroopbox)
stroopbox <- stroopdata %>%
gather(key = Condition, value = ResponseTime)
stroopbox$WordsCondition <- ifelse(k == "Congruent ",
"Congruent ", "Incongruent")
View(stroopbox)
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime))
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot()
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(fill = factor(WordsCondition))
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(fill = factor(WordsCondition))
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(fill = factor(WordsCondition))
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(fill = factor(WordsCondition))
"Congruent ", "Incongruent")
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(fill = WordsCondition)
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot()
head(stroopbox)
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(WordsCondition)
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(aes(fill = WordsCondition))
stroopbox$WordsCondition <- ifelse(k == "Congruent ",
"Congruent ", "Incongruent")
ggplot(stroopbox, aes(factor(Condition), ResponseTime)) +
geom_boxplot(aes(fill = Condition))
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(aes(fill = WordsCondition))
library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyr)
stroopbox <- stroopdata %>%
gather(key = WordsCondition, value = ResponseTime)
ggplot(stroopbox, aes(factor(Condition), ResponseTime)) +
geom_boxplot(aes(fill = Condition))
stroopbox <- stroopdata %>%
gather(key = WordsCondition, value = ResponseTime)
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(aes(fill = WordsCondition))
ggplot(stroopbox, aes(factor(WordsCondition), ResponseTime)) +
geom_boxplot(aes(fill = WordsCondition)) +
theme_bw()
setwd("~/Documents/DataScientistLearningPath/Udacity_DataAnalystNanodegree/P1_TestPerceptualPhenomenon/Project")
library(readr)
stroopdata <- read_csv("stroopdata.csv")
head(stroopdata, 3)
str(stroopdata)
library(ggplot2)
library(ggthemes)
ggplot(stroopdata, aes(Incongruent)) +
geom_histogram(fill = "red", color= "black", alpha  = 0.5, binwidth = 2.5) +
scale_x_continuous(breaks = seq(min(13), max(35), by = 2.5)) +
theme_classic() +
ggtitle("Response time by participant -  Incongruent words condition")
library(ggplot2)
library(ggthemes)
ggplot(stroopdata, aes(Congruent)) +
geom_histogram(fill = "red", color= "black", alpha  = 0.5, binwidth = 2.5) +
scale_x_continuous(breaks = seq(min(6), max(25), by = 2.5)) +
theme_classic() +
ggtitle("Response time by participant -  Congruent words condition")
library(ggplot2)
library(ggthemes)
ggplot(stroopbox, aes(ResponseTime)) +
geom_histogram(fill = "red", color= "black", alpha  = 0.5, binwidth = 2.5) +
scale_x_continuous(breaks = seq(min(13), max(35), by = 2.5)) +
theme_classic() +
ggtitle("Response time by participant -  Incongruent words condition")
library(ggplot2)
library(ggthemes)
ggplot(stroopbox, aes(ResponseTime)) +
geom_histogram(aes(fill = WordsCondition), color= "black", alpha  = 0.5, binwidth = 2.5) +
scale_x_continuous(breaks = seq(min(13), max(35), by = 2.5)) +
theme_classic() +
ggtitle("Response time by participant -  Incongruent words condition")
summary(stroopdata)
kable(summary(stroopdata))
knitr::kable(summary(stroopdata))
knitr::kable(head(stroopdata))
y <- 2*x + rnorm(n)
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(xtable)
tab <- xtable(summary(out)$coef, digits=c(0, 2, 2, 1, 2))
print(tab, type="html")
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(xtable)
xtable(summary(out)$coef, digits=c(0, 2, 2, 1, 2))
summary(stroopdata)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
stroopdata <- read_csv("stroopdata.csv")
head(stroopdata, 3)
str(stroopdata)
head(stroopdata)
ttest %>% stroopdata
library(dplyr)
library(tidyr)
ttest %>% stroopdata
ttest <- stroopdata %>%
t.test(Congruent, Incongruent)
ttest <- stroopdata %>%
x <-  t.test(stroopdata$Congruent, stroopdata$Incongruent)
x <-  t.test(stroopdata$Congruent, stroopdata$Incongruent)
x
ttest <- stroopdata %>%
t.test(stroopdata$Congruent, stroopdata$Incongruent)
ttest <- stroopdata %>%
t.test(Congruent, Incongruent)
stroopdata %>%
t.test(Congruent, Incongruent)
stroopdata %>%
t.test(Congruent, Incongruent)
stroopdata %>%
t.test(Congruent, Incongruent)
?t.test
t.test(x = Congruent, y = Incongruent,
alternative = "two.sided", paired = TRUE, mu = 0, conf.level = 0.95)
stroopdata %>%
t.test(x = Congruent, y = Incongruent,
alternative = "two.sided", paired = TRUE, mu = 0, conf.level = 0.95)
stroopdata %>%
t.test(x = Congruent, y = Incongruent,
alternative = "two.sided", paired = TRUE, mu = 0, conf.level = 0.95)
ttest <- t.test(x = Congruent, y = Incongruent,
alternative = "two.sided", paired = TRUE, mu = 0, conf.level = 0.95)
ttest <- t.test(data = stroopdata, x = Congruent, y = Incongruent,
alternative = "two.sided", paired = TRUE, mu = 0, conf.level = 0.95)
ttest <- t.test(data = stroopdata, x = Congruent ~ y = Incongruent,
t.test(Congruent ~ Incongruent, data = stroopdata)
test %>% stroopdata
test <- stroopdata  %>%
select(-Incongruent)
test
test <- stroopdata  %>%
t.test(Congruent , Incongruent)
test <- stroopdata  %>%
t.test(Congruent , Incongruent)
t.test(x, y = NULL, alternative = "two.sided",  mu = 0, paired = FALSE,    conf.level = 0.95, treatment = NULL)
t.test(Congruent, Incongruent, alternative = "two.sided",  mu = 0,                  paired = FALSE,    conf.level = 0.95, treatment = NULL)
t.test(stroopdata$Congruent, stroopdata$Incongruent, alternative =   "two.sided",  mu = 0, paired = FALSE,    conf.level = 0.95, treatment = NULL)
test <- stroopdata  %>%
t.test(Congruent, Incongruent, alternative =   "two.sided",  mu = 0, paired = FALSE,    conf.level = 0.95, treatment = NULL)
stroopdata  %>%
t.test(Congruent, Incongruent, alternative = "two.sided",  mu = 0, paired = FALSE,    conf.level = 0.95, treatment = NULL)
# Install these packages if they are missing
list.of.packages <- c("ggplot2", "knitr","dplyr","readr","ggthemes")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)) install.packages(new.packages)
library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
library(ggthemes)
opts_chunk$set(dev = "png",
dev.args = list(type = "cairo"),
dpi = 300)
# Load data
d <- read_csv("http://my.ilstu.edu/~wjschne/444/ttest.csv")
# Independent-samples t-test with variances assumed to be equal.
tt <- t.test(DV ~ IV, data = d, var.equal = TRUE)
tvalue <- tt$statistic %>% formatC(digits = 2, format = "f")
pvalue <- tt$p.value %>% formatC(digits = 2, format = "f")
df <- tt$parameter
# Summarize data by groups
md <- d %>%
group_by(IV) %>%
summarize(N = length(DV),
Mean = mean(DV),
SD = sd(DV),
SE = SD/sqrt(N))
# Summarize whole data set
td <- d %>% summarize(IV = "Total",
N = length(DV),
Mean = mean(DV),
SD = sd(DV),
SE = SD/sqrt(N))
# Combine data into one object
dd <- rbind(md,td)
#Make Table
kable(dd,
digits = 2,
caption = "Descriptive Statistics for DV")
d <- read_csv("http://my.ilstu.edu/~wjschne/444/ttest.csv")
# Install these packages if they are missing
list.of.packages <- c("ggplot2", "knitr","dplyr","readr","ggthemes")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages)) install.packages(new.packages)
library(knitr)
library(dplyr)
library(ggplot2)
library(readr)
library(ggthemes)
opts_chunk$set(dev = "png",
dev.args = list(type = "cairo"),
dpi = 300)
# Load data
d <- read_csv("http://my.ilstu.edu/~wjschne/444/ttest.csv")
# Independent-samples t-test with variances assumed to be equal.
tt <- t.test(DV ~ IV, data = d, var.equal = TRUE)
tvalue <- tt$statistic %>% formatC(digits = 2, format = "f")
pvalue <- tt$p.value %>% formatC(digits = 2, format = "f")
df <- tt$parameter
# Summarize data by groups
md <- d %>%
group_by(IV) %>%
summarize(N = length(DV),
Mean = mean(DV),
SD = sd(DV),
SE = SD/sqrt(N))
# Summarize whole data set
td <- d %>% summarize(IV = "Total",
N = length(DV),
Mean = mean(DV),
SD = sd(DV),
SE = SD/sqrt(N))
# Combine data into one object
dd <- rbind(md,td)
#Make Table
kable(dd,
digits = 2,
caption = "Descriptive Statistics for DV")
# Set ggplot defaults
theme_set(theme_few(base_size = 14, base_family = "serif"))
# Tell gpplot what data to load and
# what to put on x and y axis
dm <- d %>% group_by(IV) %>% summarize(DV = mean(DV))
p <- ggplot(data = d, aes(y = DV, x = IV))
p + geom_violin() +
stat_summary(fun.data = "mean_cl_normal",color = "black", size = 1.1) +
stat_summary(fun.y = "mean", geom = "text", hjust = -0.5, aes(label = round(..y..,2)), color = "black", family = "serif")
knitr::opts_chunk$set(echo = TRUE)
# Install these packages if they are missing
# list_of_packages <- c("readr", "ggplot2", "dplyr", "tidyr", "ggthemes")
# new_packages <- list_of_packages[!(list_of_packages %in%
#                                    install.packages()[, "Package"])]
# if (length(new_packages)) install.packages(new_packages)
library(knitr)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
# Read in Data
stroop_data <- read_csv("stroopdata.csv")
# View data
head(stroop_data)
tail(stroop_data)
# Check structure of the data
str(stroop_data)
library(dplyr)
library(tidyr)
stroop_data_long <- stroop_data %>%
gather(key = Condition, value = ResponseTime)
# Summarise data by group
sumstat <- stroop_data_long %>%
group_by(Condition) %>%
summarise(N = length(ResponseTime),
Mean = mean(ResponseTime),
SD = sd(ResponseTime),
SE = SD/sqrt(N))
# Display sumstat
library(knitr)
knitr::kable(sumstat, digits = 2)
# Summarise whole data set
total_sumstat <- stroop_data_long %>%
summarise(Condition = "Total",
N = length(ResponseTime),
Mean = mean(ResponseTime),
SD = sd(ResponseTime),
SE = SD/sqrt(N))
# Now we combine data into one object
combined_sumstat <- rbind(sumstat, total_sumstat)
# Make Table
knitr::kable(combined_sumstat,
digits = 2,
caption = "Descriptive Statistics for ResponseTime")
library(ggplot2)
library(ggthemes)
library(Hmisc)
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
stat_summary(fun.y = "mean", geom = "bar") +
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.1) +
theme_bw()
library(ggplot2)
library(ggthemes)
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
geom_boxplot() +
theme_bw()
library(ggplot2)
library(ggthemes)
ggplot(data = stroop_data_long, aes(ResponseTime)) +
geom_density(aes(fill = Condition))  +
theme_bw()
library(ggplot2)
library(ggthemes)
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
geom_violin(alpha = 0.5, color = NA) +
geom_boxplot(notch = TRUE, width = 0.5) +
theme_bw()
library(ggplot2)
library(ggthemes)
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
geom_dotplot(binaxis = "y", stackdir = "center",binwidth = .4, alpha = 0.5, color = NA) +
stat_summary(fun.data = "mean_cl_normal", geom = "pointrange", width = 0.1,
color = c("royalblue","firebrick"), lwd = 1.5) +
theme_bw()
ttest <- t.test(ResponseTime ~ Condition, data = stroop_data_long,
paired = TRUE, mu = 0, conf.level = 0.95)
ttest
tvalue <- ttest$statistic %>%
formatC(digit = 2, format = "f")
tvalue
pvalue <- ttest$p.value %>%
formatC(digit = 2, format = "f")
df <- ttest$parameter
df
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
combined_sumstat
setwd("~/Documents/DataScientistLearningPath/Udacity_DataAnalystNanodegree/P1_TestPerceptualPhenomenon/Project")
knitr::opts_chunk$set(echo = TRUE)
# Install these packages if they are missing
library(knitr)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
# Read in Data
stroop_data <- read_csv("stroopdata.csv")
# View data
head(stroop_data)
tail(stroop_data)
# Check structure of the data
str(stroop_data)
# Reshape data in long format
stroop_data_long <- stroop_data %>%
gather(key = Condition, value = ResponseTime)
# Summarise data by group
sumstat <- stroop_data_long %>%
group_by(Condition) %>%
summarise(N = length(ResponseTime),
Mean = mean(ResponseTime),
SD = sd(ResponseTime),
SE = SD/sqrt(N))
# Display sumstat
library(knitr)
# Summarise whole data set
total_sumstat <- stroop_data_long %>%
summarise(Condition = "Total",
N = length(ResponseTime),
Mean = mean(ResponseTime),
SD = sd(ResponseTime),
SE = SD/sqrt(N))
# Now we combine data into one object
combined_sumstat <- rbind(sumstat, total_sumstat)
# Make Table
knitr::kable(combined_sumstat,
digits = 2,
caption = "Descriptive Statistics for ResponseTime")
# Set ggplot defaults
# Tell gpplot what data to load and
# what to put on x and y axis
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill =  Condition)) +
stat_summary(fun.y = "mean", geom = "bar") +
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.1) +
theme_bw()
# Set ggplot defaults
# Tell gpplot what data to load and
# what to put on x and y axis
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
geom_boxplot() +
theme_bw()
# Set ggplot defaults
# Tell gpplot what data to load and
# what to put on x and y axis
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
geom_violin(alpha = 0.5, color = NA) +
geom_boxplot(notch = TRUE, width = 0.5) +
theme_bw()
library(ggplot2)
library(ggthemes)
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
geom_dotplot(binaxis = "y", stackdir = "center",binwidth = .4, alpha = 0.5, color = NA) +
stat_summary(fun.data = "mean_cl_normal", geom = "pointrange", width = 0.1,
color = c("royalblue","firebrick"), lwd = 1.5) +
theme_bw()
ttest <- t.test(ResponseTime ~ Condition, data = stroop_data_long,
paired = TRUE, mu = 0, conf.level = 0.95)
tvalue <- ttest$statistic %>%
formatC(digit = 2, format = "f")
pvalue <- ttest$p.value %>%
formatC(digit = 2, format = "f")
df <- ttest$parameter
ttest
tvalue
df
pvalue
ls()
combined_sumstat
library(ggplot2)
library(ggthemes)
ggplot(data = stroop_data_long, aes(x = Condition, y = ResponseTime, fill = Condition)) +
geom_dotplot(binaxis = "y", stackdir = "center",binwidth = .4, alpha = 0.5, color = NA) +
stat_summary(fun.data = "mean_cl_normal", geom = "pointrange", width = 0.1,
color = c("royalblue","firebrick"), lwd = 1.5) +
theme_bw()
setwd("~/Documents/DataScientistLearningPath/Udacity_DataAnalystNanodegree/P1_TestPerceptualPhenomenon/Project")
