'Personal Loan',
'Student Use',
'Auto',
'Baby & Adoption',
'Boat',
'Cosmetic Procedure',
'Engagement Ring',
'Green Loans',
'Household Expenses',
'Large Purchases',
'Medical/Dental',
'Motorcycle', 'RV',
'Taxes', 'Vacation',
'Wedding Loans',
'Other',
'Not Available'
))
#table (prosper_removed$ListingCategoryN)
## Add column "LoanPurpsoe"
prosper_removed <-
dplyr::mutate (prosper_removed, LoanPurpose =  ListingCategoryN)
prosper_removed$LoanPurpose <-
sapply (prosper_removed$LoanPurpose, group_loan_purpose)
table (prosper_removed$LoanPurpose)
# calculate correlation matrix
prosper_num <- sapply (prosper_removed_to_imputed_complete, is.numeric)
prosper_removed_to_imputed_complete_num <-
prosper_removed_to_imputed_complete[, prosper_num ]
pld_15 <- prosper_removed_to_imputed_complete
#Apply correlation filter at 0.70,
prticn <- prosper_removed_to_imputed_complete_num
corMatMy <- cor (prosper_removed_to_imputed_complete_num)
highlyCor <-
colnames(prticn[findCorrelation(corMatMy, cutoff = 0.7, verbose = TRUE)])
# which variables are flagged for removal?
highlyCor
#then we remove these variables
prosper_removed_to_imputed_complete_num_cor <-
prosper_removed_to_imputed_complete_num[,which(!colnames(
prosper_removed_to_imputed_complete_num) %in% highlyCor)]
prosper_removed_to_imputed_complete_final_selection <-
read.csv("combined_imputed_feature_model_highlyCorr_removed_all.csv")
prosper_removed_to_imputed_complete_final_selection <-
dplyr::select(prosper_removed_to_imputed_complete_final_selection,
-X.1, -X)
df_ttest <- prosper_removed_to_imputed_complete_final_selection
pld_final <- prosper_removed_to_imputed_complete_final_selection
pld_final$LoanPurpose_1 <- sapply (pld_final$LoanPurpose, group_loan_purpose)
#table (pld_final$LoanPurpose_1)
# dim(pld_final)
# names(pld_final)
str (pld_final)
pld_final$IncomeRange_2 <- factor(pld_final$IncomeRange,
c("$0","$1-24,999", "$25,000-49,999",
"$50,000-74,999", "$75,000-99,999",
"$100,000+", "Not displayed",
"Not employed"))
## Creare plots for the data
ggplot (data = pld_final, aes(x = factor (IncomeRange_2))) +
geom_bar (color = "black", fill = "green") +
xlab ("Income Range (Dollars)") +
ggtitle ("Income Range Of Borrowers") +
theme_economist () +
coord_flip ()
summary (pld_final$IncomeRange)
pld_final$IncomeVerifiable <- ifelse (pld_final$IncomeVerifiable == 0,
"Yes", "No")
pld_final$IncomeVerifiable_2 <- factor (pld_final$IncomeVerifiable,
c('Yes', 'No'))
## Create plots for the data
ggplot(data = pld_final, aes(x = IncomeVerifiable_2)) +
geom_bar() +
geom_bar(color = "black", fill = "green") +
ggtitle("Is Income Verifiable?") +
theme_economist()
table (pld_final$IncomeVerifiable)
ggplot (data = pld_final, aes(x = AmountDelinquent)) +
geom_histogram (color = "black", fill = "green", binwidth = 100) +
xlim (0, quantile (prosper$AmountDelinquent, 0.95, na.rm=TRUE)) +
xlab ("Amount in Dollars") +
ggtitle ("Delinquent Amount") +
theme_economist ()
summary (pld_final$AmountDelinquent)
dim (pld_final[pld_final$AmountDelinquent==0, ])
ggplot (data = pld_final, aes (x = AmountDelinquent)) +
geom_histogram (color = "black", fill = "green", binwidth = 30) +
xlim(10, 3000) +
xlab ("Amount in Dollars") +
ggtitle ("Delinquent Amount") +
theme_economist ()
ggplot (data = pld_final, aes (x = DelinquenciesLast7Years))+
geom_bar (color = "black", fill = "green") +
xlim (1, 100) +
xlab ("Amount in Dollars") +
ggtitle ("DelinquenciesLast7Years") +
theme_economist ()
summary (pld_final$DelinquenciesLast7Years)
ggplot (data = pld_final, aes (x = DebtToIncomeRatio)) +
geom_histogram (color = "black", fill = "green", binwidth = 0.02) +
xlab ("Debt To IncomeRatio") +
xlim (0, quantile(prosper$DebtToIncomeRatio, prob = 0.99, na.rm=TRUE)) +
ggtitle ("Debt To Income Ratio") +
theme_economist ()
summary (pld_final$DebtToIncomeRatio)
ggplot (data = pld_final, aes (x = RevolvingCreditBalance)) +
geom_histogram(color = "black", fill = "green") +
xlab ("Revolving Credit Balance") +
theme_economist ()
summary (pld_final$RevolvingCreditBalance)
quantile (pld_final$RevolvingCreditBalance, 0.99, na.rm=T)
pld_final_1 <- dplyr::filter (pld_final, RevolvingCreditBalance <= 150862)
ggplot (data = pld_final_1, aes (x = RevolvingCreditBalance)) +
geom_histogram (color = "black", fill = "green") +
ggtitle ("RevolvingCreditBalance") +
theme_economist ()
pld_final$Term <- factor(pld_final$Term )
ggplot (data = pld_final, aes (x = Term)) +
geom_bar (fill = "green") +
ggtitle ("Length of the Loan") +
theme_economist()
table (pld_final$Term)
ggplot(data = pld_final, aes (x = BorrowerAPR)) +
geom_histogram (color = "black", fill = "green", binwidth = 0.01) +
xlab ("Borrower APR") +
ggtitle ("BorrowerAPR Distribution") +
theme_economist()
summary (pld_final$BorrowerAPR)
ListingCategory_od <- data.frame (table (prosper_removed$ListingCategoryN))
ListingCategory_od  <- ListingCategory_od %>%
dplyr::rename(LoanPurpose = Var1,
Counts = Freq) %>%
mutate(logCounts = log10(Counts))
## Creating plots
ggplot (ListingCategory_od,
aes (x = reorder( LoanPurpose, logCounts), y = log10 (logCounts))) +
geom_bar (stat = "identity", colour = "black", fill = "green") +
ggtitle ("The Purpose of the Loan Listing") +
xlab ("ListingCategory") +
theme_economist () +
coord_flip ()
table (prosper_removed$ListingCategoryN)
ggplot (data = prosper, aes (x = CreditScoreRangeUpper)) +
geom_histogram (color = "black", fill = "green", binwidth = 20) +
xlab (" Credit Score RangeUpper") +
ggtitle ("Borrower's Credit Score Upper Range") +
theme_economist ()
summary (prosper_removed$CreditScoreRangeUpper)
pld_final$LoanStatus <- factor (pld_final$LoanStatus, c ('Performing',
'NonPerforming' ))
ggplot (data = pld_final, aes (x = LoanStatus)) +
geom_bar (color = "black", fill = "green") +
xlab ("Loan Status") +
ggtitle ("LoanStatus") +
theme_economist ()
table(pld_final$LoanStatus)
Occupation <- data.frame (table (pld_final$Occupation))
Occupation <- Occupation %>%
dplyr::rename(Occupation = Var1, Counts = Freq)
## Create plots for the data
ggplot(Occupation, aes (x = reorder (Occupation, -Counts), y = Counts)) +
geom_bar (stat = "identity", colour = "black", fill = "green") +
ggtitle ("Occupation") +
xlab ("Occupation") +
theme_economist ()
table (pld_final$Occupation)
ggplot2::ggplot (pld_final, aes (EmploymentStatus )) +
ggplot2::geom_bar (colour = "black", fill = "green")  +
ggtitle ("Employment Status") +
theme_economist ()
table (pld_final$EmploymentStatus)
ggplot2::ggplot(pld_final, aes(EmploymentStatusDuration)) +
ggplot2::geom_histogram(colour = "black", fill = "green") +
ggtitle("EmploymentStatusDuration") +
theme_economist()
summary (pld_final$EmploymentStatusDuration)
pld_final$IsBorrowerHomeowner <- ifelse (pld_final$IsBorrowerHomeowner == 0,
"No", "Yes")
pld_final$IsBorrowerHomeowner <- factor (pld_final$IsBorrowerHomeowner,
c("Yes", "No"))
ggplot (data = pld_final, aes (x = IsBorrowerHomeowner)) +
geom_bar (color = "black", fill = "green") +
ggtitle ("Is Borrower Homeowner?") +
theme_economist ()
summary (pld_final$IsBorrowerHomeowner)
borrower_state_info = prosper %>%
group_by (BorrowerState) %>%
summarise (n = n()) %>%
arrange (desc (n))
borrower_state_map =
ichoropleth(n ~ BorrowerState, data = borrower_state_info,
ncuts = 5, pal = 'PuRd',
geographyConfig = list (popupTemplate = "#!function(geo,
data) { return '<div                                                           class=\"hoverinfo\"><strong>'                                                  + data.BorrowerState + '<br>' +                                                data.n + '</strong></div>';}!#"))
borrower_state_map$save("myRmap.html", cdn = TRUE)
htmltools::includeHTML("myRmap.html")
# calculate correlation matrix
corrplot (corMatMy, order = "hclust", tl.pos = "n", addrect = 2)
#pld_final$IsBorrowerHomeowner <- ifelse(pld_final$IsBorrowerHomeowner == FALSE, "No", "Yes")
ownership_status <- table (pld_final$LoanStatus, pld_final$IsBorrowerHomeowner)
prop_ownership <- round (prop.table (ownership_status, 2) * 100, 2)
# prop_ownership
prop_is_home <- table (pld_final$LoanStatus, pld_final$IsBorrowerHomeowner)
prop_is_home <- round (prop.table (prop_is_home , 2) * 100, 2)
prop_is_home_df <- data.frame (prop_is_home)
prop_is_home_df <- prop_is_home_df  %>%
dplyr::rename (LoanStatus = Var1, IsBorrowerHomeowner = Var2, Counts = Freq)
prop_is_home_df_1 <- prop_is_home_df %>%
tidyr::spread(LoanStatus, Counts)
## Create heatmap of the data
ggplot(prop_is_home_df,
aes ( y = LoanStatus, x = IsBorrowerHomeowner, fill = Counts)) +
geom_tile() +
scale_fill_gradient(low='white',high='red', trans = 'log')
prop_is_home_df_1
#Debt to Income Ratio (break into factors at 5% levels)
pld_final$DebtToIncomeRatioN <- cut (pld_final$DebtToIncomeRatio, breaks =
c (0, 5, 10,15))
dti <- table (pld_final$LoanStatus, pld_final$DebtToIncomeRatioN)
prop_dti <- round (prop.table (dti, 2) * 100, 2)
# prop_dti
prop_dti_df <- data.frame(prop_dti)
prop_dti_df <- prop_dti_df  %>%
dplyr::rename(LoanPerformance = Var1,
DebitToIcnomePercentage = Var2 , Counts = Freq)
prop_dti_df$DebitToIcnomePercentage <-
sapply (prop_dti_df$DebitToIcnomePercentage, group_percent_dti)
tab = xtabs (Counts ~ LoanPerformance + DebitToIcnomePercentage,
data = prop_dti_df)
mosaic (data = tab, ~ LoanPerformance + DebitToIcnomePercentage, shade = TRUE,        cex=2.5, main = "Debit To Income Ratio : Effect On Loan Performance")
prop_dti_df
# Revolving Utilization (break into 0 - 20, then factors of 10, then 80+)
pld_final$RevolvingCreditBalanceN <- cut (pld_final$RevolvingCreditBalance,
breaks = c(0, 20, 30, 40, 50, 60, 70,
80, 141))
revol_util <- table (pld_final$LoanStatus, pld_final$RevolvingCreditBalanceN)
prop_revol_util <- round (prop.table (revol_util, 2) * 100, 2)
prop_revol_util_df <- data.frame (prop_revol_util)
prop_revol_util_df <- prop_revol_util_df %>%
dplyr::rename (LoanPerformance = Var1, RevolvingCreditBalance = Var2,
Counts = Freq)
prop_revol_util_df$RevolvingCreditBalance <-
sapply(prop_revol_util_df$RevolvingCreditBalance, group_revolving)
revol_util_h <- table (pld_final$LoanStatus, pld_final$RevolvingCreditBalanceN)
revol_util_h_long <- melt(revol_util_h )
colnames (revol_util_h_long) <- c("LoanStatus","RevolvingCredit","Count")
# Creating heatmap of the data
ggplot (revol_util_h_long,
aes (  x = RevolvingCredit, y = LoanStatus, fill = Count)) +             geom_tile() +
scale_fill_gradient (low = 'white',high = 'red', trans = 'log')
# Revolving Utilization (break into 0 - 20, then factors of 10, then 80+)
prop_revol_util_df
purpose <- table (prosper_removed$LoanStatus, prosper_removed$ListingCategoryN)
prop_purpose <- round (prop.table (purpose, 2) * 100, 2)
prop_purpose_df <- data.frame (prop_purpose)
prop_purpose_df <- prop_purpose_df %>%
dplyr::rename(LoanStatus = Var1, LoanPurpose = Var2, Counts = Freq)
prop_purpose_df_1 <- prop_purpose_df %>%
tidyr::spread (LoanStatus, Counts)
## Create plot for the data
dat2 <- prop_purpose_df
setDT(dat2)
dat5<- dat2[, order := order (Counts),by = LoanStatus]
## Create plot for the data
ggplot (dat5, aes (x = LoanStatus , y = Counts, fill = LoanPurpose,
group = order)) +
geom_bar (aes (group = order), stat = "identity", position = "dodge") +
guides (fill = guide_legend(reverse = TRUE)) +
theme_economist (base_size = 6)
prop_purpose_df_1
#pld_final$LoanPurpose <- sapply (pld_final$LoanPurpose, group_loan_purpose)
purpose_2 <- table (prosper_removed$LoanStatus, prosper_removed$LoanPurpose)
prop_purpose_2 <- round (prop.table (purpose_2, 2) * 100, 2)
prop_purpose_df_2 <- data.frame (prop_purpose_2)
prop_purpose_df_2 <- prop_purpose_df_2 %>%
dplyr::rename(LoanStatus = Var1,LoanPurpose = Var2, Counts = Freq)
prop_purpose_df_3 <- prop_purpose_df_2 %>%
tidyr::spread (LoanStatus, Counts)
##
dat3 <- prop_purpose_df_2
setDT(dat3)
dat4 <- dat3[, order := order (Counts),by = LoanStatus]
## Creat plot for the data
ggplot (dat4, aes (x = LoanStatus , y = Counts, fill = LoanPurpose,
group = order)) +
geom_bar (aes (group = order), stat = "identity", position = "dodge") +
guides (fill = guide_legend(reverse = TRUE)) +
theme_economist (base_size = 6.5)
prop_purpose_df_3
# Inquiries in the last 6 months (combine factor levels for any > 4)
pld_final$InquiriesLast6Months <- factor (pld_final$InquiriesLast6Months)
levels (pld_final$InquiriesLast6Months) <- c("0", "1", "2", "3", rep("4+", 46))
inq_last_6mths <- table (pld_final$LoanStatus, pld_final$InquiriesLast6Months)
prop_inq_last_6mths <- round (prop.table(inq_last_6mths, 2) * 100, 2)
prop_inq_last_6mths_df <- data.frame (prop_inq_last_6mths)
prop_inq_last_6mths_df <- prop_inq_last_6mths_df %>%
dplyr::rename(LoanStatus = Var1, InquiriesLast6Months = Var2, Counts = Freq)
prop_inq_last_6mths_df_1<- prop_inq_last_6mths_df  %>%
tidyr::spread (LoanStatus, Counts)
### Plotting the data
ggplot (prop_inq_last_6mths_df,
aes (x = InquiriesLast6Months, y = LoanStatus, fill = Counts))+          geom_tile() +
scale_fill_gradient (low = 'white',high = 'red', trans = 'log')
prop_inq_last_6mths
income_range <- table(pld_final$LoanStatus,pld_final$IncomeRange, exclude = c ("Not displayed","Not employed"))
prop_income_range <- round (prop.table(income_range , 2) * 100, 2)
prop_income_range_df <- data.frame (prop_income_range)
prop_income_range_df <- prop_income_range_df  %>%
dplyr::rename(LoanStatus = Var1, IncomeRange = Var2, Counts = Freq)
prop_income_range_df_1<- prop_inq_last_6mths_df  %>%
tidyr::spread (LoanStatus, Counts)
## Creating heatmaps of the data
ggplot (prop_income_range_df,
aes (x = IncomeRange, y = LoanStatus, fill = Counts)) +
geom_tile () +
scale_fill_gradient (low = 'white',high = 'red', trans = 'log')
prop_income_range
#pld_final$IncomeVerifiable <- ifelse(pld_final$IncomeVerifiable == 0, "No", "Yes")
is_inc_v <- table (pld_final$LoanStatus, pld_final$IncomeVerifiable)
prop_is_inc_v <- round (prop.table (is_inc_v, 2) * 100, 2)
prop_is_inc_v_df <- data.frame (prop_is_inc_v)
prop_is_inc_v_df <- prop_is_inc_v_df  %>%
dplyr::rename(LoanStatus = Var1, IncomeVerifiable = Var2, Counts = Freq)
prop_is_inc_v_df_1<- prop_is_inc_v_df %>%
tidyr::spread (LoanStatus, Counts)
### Plots
setDT(prop_is_inc_v_df)
prop_is_inc_v_df[, order:= order (Counts), by = LoanStatus]
## Creating plot for the data
ggplot (prop_is_inc_v_df, aes (x = IncomeVerifiable, y = Counts,
fill = LoanStatus, group = order)) +
geom_bar (aes (group = order), stat = "identity", position = "dodge") +
guides (fill = guide_legend(reverse = TRUE)) +
theme_economist()
prop_is_inc_v_df_1
# Number of Public Records (break factor levels into 0, 1, 2+)
pld_final$PublicRecordsLast10Years <-factor(pld_final$PublicRecordsLast10Years)
levels (pld_final$PublicRecordsLast10Years) <- c("0",  "1" , "2", "3", "4", "5"
,"6"  ,"7" , "8" , "9",
rep ("10+", 16))
pub_rec <- table (pld_final$LoanStatus, pld_final$PublicRecordsLast10Years)
prop_pub_rec <- round (prop.table (pub_rec, 2) * 100, 2)
prop_pub_rec_df <- data.frame (prop_pub_rec)
prop_pub_rec_df <- prop_pub_rec_df  %>%
dplyr::rename(LoanStatus = Var1, PublicRecordsLast10Years = Var2,
Counts = Freq)
prop_pub_rec_df_1<- prop_pub_rec_df  %>% tidyr::spread (LoanStatus, Counts)
### Creating heatmap of the data
ggplot (prop_pub_rec_df,
aes ( y = LoanStatus, x = PublicRecordsLast10Years, fill = Counts)) +    geom_tile() +
scale_fill_gradient (low = 'white',high = 'red', trans = 'log')
prop_pub_rec_df_1
pld_final_1 <- dplyr::filter (pld_final, DebtToIncomeRatio <= 1)
ggplot(pld_final_1, aes (y = DebtToIncomeRatio,
x = factor(LoanPurpose_1))) +
geom_jitter (aes (y = DebtToIncomeRatio, x = factor(LoanPurpose_1),
color = LoanStatus), alpha = 0.4) +
geom_boxplot (aes (fill = LoanStatus), alpha = 0.4) +
xlab ("Purpose Of Loan") +
theme_economist (base_size = 8)
df <- df_ttest
ttest <- t.test(df [df$LoanStatus == "NonPerforming", "DebtToIncomeRatio"],
df[df$LoanStatus == "Performing", "DebtToIncomeRatio"])
ttest
ggplot(pld_final_1, aes(x = factor(IsBorrowerHomeowner),
y = DebtToIncomeRatio)) +
geom_jitter (aes (y = DebtToIncomeRatio, x = IsBorrowerHomeowner,
color = LoanStatus), alpha = 0.4) +
geom_boxplot (aes (fill = LoanStatus), alpha = 0.4) +
xlab ("Is Borrower Home Owner") +
theme_economist ()
#df$IsBorrowerHomeowner <- ifelse(df$IsBorrowerHomeowner == "No", 0, 1)
ttest <- t.test(df [df$LoanStatus == "NonPerforming", "IsBorrowerHomeowner"],
df[df$LoanStatus == "Performing", "IsBorrowerHomeowner"])
ttest
pld_final_2 <- dplyr::filter (pld_final, DebtToIncomeRatio <= 1)
ggplot (pld_final_2, aes (x = Term, y = DebtToIncomeRatio)) +
geom_jitter (aes (y = DebtToIncomeRatio, x = Term,
color = LoanStatus), alpha = 0.4) +
geom_boxplot (aes (fill = LoanStatus), alpha = 0.4) +
theme_economist ()
df$Term <- as.numeric(df$Term)
ttest <- t.test(df [df$LoanStatus == "NonPerforming", "Term"],
df[df$LoanStatus == "Performing", "Term"])
ttest
ggplot(pld_final_2, aes (x = IncomeVerifiable, y = DebtToIncomeRatio)) +
geom_boxplot (aes (color = LoanStatus)) +
xlab("Income Verifiable ?") +
theme_economist ()
# df$IncomeVerifiable <- ifelse (df$IncomeVerifiable == "No", 0, 1)
ttest <- t.test(df [df$LoanStatus == "NonPerforming", "IncomeVerifiable"],
df[df$LoanStatus == "Performing", "IncomeVerifiable"])
ttest
ggplot(pld_final_1, aes (x = DebtToIncomeRatio, y = BorrowerAPR)) +
geom_jitter (aes (color = LoanStatus)) +
geom_smooth () +
theme_economist ()
ggplot(pld_final, aes ( x = DelinquenciesLast7Years,
y = RevolvingCreditBalance)) +
geom_jitter (aes(color = LoanStatus)) +
geom_smooth () +
scale_y_log10() +
theme_economist()
pld_model_selection <- pld_14 %>%
dplyr::select(
IncomeRange,
IncomeVerifiable,
AmountDelinquent,
DelinquenciesLast7Years,
DebtToIncomeRatio,
RevolvingCreditBalance,
Term,
BorrowerAPR,
LoanPurpose,
CreditScoreRangeUpper,
InquiriesLast6Months,
LoanStatus,
Occupation,
EmploymentStatus,
EmploymentStatusDuration,
IsBorrowerHomeowner,
BorrowerState
)
dim (pld_model_selection)
# Convertable variables to factors
model_pld <- pld_model_selection
model_pld$LoanPurpose <- sapply (model_pld$LoanPurpose, group_loan_purpose)
model_pld$LoanStatus  <- factor (model_pld$LoanStatus)
model_pld$IncomeRange <- factor (model_pld$IncomeRange)
model_pld$IncomeVerifiable <- factor (model_pld$IncomeVerifiable)
model_pld$IsBorrowerHomeowner <- factor (model_pld$IsBorrowerHomeowner)
model_pld$EmploymentStatus <- factor (model_pld$EmploymentStatus)
model_pld$Occupation <- factor (model_pld$Occupation )
model_pld$LoanPurpose <- factor (model_pld$LoanPurpose)
model_pld$BorrowerState <- factor(model_pld$BorrowerState)
model_pld$Term <- factor (model_pld$Term)
str (model_pld)
# Set a random see so your "random" results are the same as this notebook
set.seed (101)
# Split up the sample, basically randomly assigns a booleans to a new column "sample"
sample <- sample.split (model_pld$LoanStatus, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset (model_pld, sample == TRUE)
# Testing Data
test = subset (model_pld, sample == FALSE)
model_train = glm (LoanStatus ~ ., family = binomial(logit), data = train)
summary (model_train)
new.step.model <- step (model_train)
summary (new.step.model)
test$predicted.LoanStatus = predict (model_train, newdata = test,
type = "response")
table(test$LoanStatus, test$predicted.LoanStatus > 0.5)
accuracy <- (1083 + 27706) / (1083 + 27706 + 4642 + 872)
cat("Model Accuracy is ::",  round (accuracy, 2) * 100, "%")
pld_final$LoanStatus <- factor (pld_final$LoanStatus, c('Performing' ,                                                                 'NonPerforming' ))
ggplot(data = pld_final, aes(x = LoanStatus)) +
geom_bar(color = "black", fill = "green") +
xlab("Loan Status") +
ggtitle("LoanStatus") +
theme_economist()
tab = xtabs (Counts ~ LoanPerformance + DebitToIcnomePercentage,
data = prop_dti_df)
mosaic(data = tab, ~ LoanPerformance + DebitToIcnomePercentage, shade = TRUE,
cex= 2.5, main = "Debit To Income Ratio : Effect On Loan Performance")
pld_final_1 <- dplyr::filter (pld_final, DebtToIncomeRatio <= 1)
ggplot(pld_final_1, aes (y = DebtToIncomeRatio,
x = factor(LoanPurpose_1))) +
geom_jitter (aes (y = DebtToIncomeRatio, x = factor(LoanPurpose_1),
color = LoanStatus), alpha = 0.4) +
geom_boxplot (aes (fill = LoanStatus), alpha = 0.4) +
xlab ("Purpose Of Loan") +
theme_economist (base_size = 8)
ggplot (ListingCategory_od,
aes (x = reorder( LoanPurpose, logCounts), y = log10 (Counts))) +
geom_bar (stat = "identity", colour = "black", fill = "green") +
ggtitle ("The Purpose of the Loan Listing") +
xlab ("ListingCategory") +
theme_economist () +
coord_flip ()
ggplot (ListingCategory_od,
aes (x = reorder( LoanPurpose, Counts), y = log10 (Counts))) +
geom_bar (stat = "identity", colour = "black", fill = "green") +
ggtitle ("The Purpose of the Loan Listing") +
xlab ("ListingCategory") +
theme_economist () +
coord_flip ()
ggplot (ListingCategory_od,
aes (x = reorder( LoanPurpose, Counts), y = Counts)) +
geom_bar (stat = "identity", colour = "black", fill = "green") +
ggtitle ("The Purpose of the Loan Listing") +
scale_x_log10 () +
xlab ("ListingCategory") +
theme_economist () +
coord_flip ()
ggplot (ListingCategory_od,
aes (x = reorder( LoanPurpose, Counts), y = log10 (Counts))) +
geom_bar (stat = "identity", colour = "black", fill = "green") +
ggtitle ("The Purpose of the Loan Listing") +
xlab ("ListingCategory") +
theme_economist () +
coord_flip ()
income_range <- table(pld_final$LoanStatus,pld_final$IncomeRange_2, exclude = c ("Not displayed","Not employed"))
prop_income_range <- round (prop.table(income_range , 2) * 100, 2)
prop_income_range_df <- data.frame (prop_income_range)
prop_income_range_df <- prop_income_range_df  %>%
dplyr::rename(LoanStatus = Var1, IncomeRange = Var2, Counts = Freq)
prop_income_range_df_1<- prop_inq_last_6mths_df  %>%
tidyr::spread (LoanStatus, Counts)
## Creating heatmaps of the data
ggplot (prop_income_range_df,
aes (x = IncomeRange, y = LoanStatus, fill = Counts)) +
geom_tile () +
scale_fill_gradient (low = 'white',high = 'red', trans = 'log')
